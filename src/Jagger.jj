// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }
// Fonction principale
PARSER_BEGIN(Jagger)

package src;
import src.VisitorEvaluation;
import src.VisitorTypeChecker;
import java.io.*;

public class Jagger
{
    public static void main(String args[]) throws ParseException, FileNotFoundException
    {
		Jagger parser;
		if(args.length!=0){
			File inputFile = new File(args[0]);
			InputStream input = new FileInputStream(inputFile);
        	parser = new Jagger(input);
		}else
			parser = new Jagger(System.in);
        parser.mainloop();
    }

}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
|   < PRINT: "print" >                         // Print function.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ ((P | E) <EOL>)* <EOF>
void mainloop():
{ Expression a; }
{
    (
      (a=print() | a=relation())
      <EOL> {VisitorPrettyPrint v=new VisitorPrettyPrint();
            a.accept(v);
            System.out.println();
            VisitorTypeChecker typeChecker = new VisitorTypeChecker();
            a.accept(typeChecker);
            if(!typeChecker.hasError()){
                VisitorEvaluation vv = new VisitorEvaluation();
                Double d = a.accept(vv);
                System.out.println(d);
            }else
                System.out.println(typeChecker.getError());
            }
    )*
    <EOF>
}

// Expression (the axiom).
// T -> "if" R "then" R "else" R
//TODO: What do we do with c?
Expression ternary():
{Expression a,b,c;}
{
    "if" a=relation() "then" b=relation() "else" c=relation()
     { return new TernOp(a,b,c); }
}

// Expression (the axiom).
// P -> "print(" R ")"
Expression print():
{Expression e;}
{
    <PRINT> "(" e=relation()  ")" { return new Print(e); }
}

// Expression (the axiom).
// R -> (E|T) ('<'R | '>'R | '<='R | '>='R | '=='R | '<>'R)
Expression relation():
{ Expression a, b; }
{
	(a=expression() | a=ternary())
	(
	  "<" b=relation() { a = new Relation(a,b,RelationOperator.INF); } 
	| ">" b=relation() { a = new Relation(a,b,RelationOperator.SUP); }
	| "<=" b=relation() { a = new Relation(a,b,RelationOperator.INF_EQ); }
	| ">=" b=relation() { a = new Relation(a,b,RelationOperator.SUP_EQ); }
	| "==" b=relation() { a = new Relation(a,b,RelationOperator.EQ); }
	| "<>" b=relation() { a = new Not(new Relation(a,b,RelationOperator.EQ)); }
	)? { return a; } 
}

// Expression (the axiom).
// E -> T ('+'T | '-'T | '||'T)*
Expression expression():
{ Expression a,b; }
{
    a=term()
    (
      "+" b=expression() { a = new BinOp(a,b,BinarOperator.PLUS); }
    | "-" b=expression() { a = new BinOp(a,b,BinarOperator.MINUS);}
	| "||" b=expression() { a = new BinOp(a,b,BinarOperator.OR);}
    )? { return a; }
}

// Term.
// T -> F ('*'F | '/'F | '&&'F)*
Expression term():
{ Expression a,b; }
{
    a=factor()
    (
      "*" b=factor() { a = new BinOp(a,b,BinarOperator.MULT); }
    | "/" b=factor() { a = new BinOp(a,b,BinarOperator.DIV); }
	| "&&" b=factor() { a = new BinOp(a,b,BinarOperator.AND);}
    )* { return a; }
}


// Factor of an expression.
// F -> <NUMBER> | <BOOLEAN> | "(" R ")" | '+'F | '-'F | '!'F
Expression factor():
{ Token t; Expression e;}
{
      t=<NUMBER> { return new Num(Double.parseDouble(t.toString())); }
	| "true" { return new Num(1.0);}
	| "false" { return new Num(0.0);}
	| "(" e=relation() ")" { return e; }
	| ("+")+  e=factor() {return new BinOp(new Num(0.0), e, BinarOperator.PLUS);}
	| ("-")+  e=factor() {return new BinOp(new Num(0.0), e, BinarOperator.MINUS);}
	| "!"   e=factor() {return new Not(e);}
}
